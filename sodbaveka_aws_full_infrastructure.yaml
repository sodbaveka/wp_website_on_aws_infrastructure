
### Generalities
AWSTemplateFormatVersion: 2010-09-09
Description: >-
  AWS CloudFormation VPC Template
### Create ressources
Resources:
  ###########
  # Network #
  ###########
  #
  #
  ### First step : Create VPC
  SodbavekaVPC:
    Type: 'AWS::EC2::VPC'
    Properties:
      CidrBlock: 10.0.0.0/16
      Tags:
        - Key: Name
          Value: 'sodbaveka-main-VPC'
        - Key: Project
          Value: 'P10_OCR'
  # ### Next step : Create private subnets in new VPC
  # PrivateSubnetA:
  #   Type: AWS::EC2::Subnet
  #   Properties:
  #     AvailabilityZone: eu-west-3a
  #     CidrBlock: 10.0.10.0/24
  #     Tags:
  #       - Key: Name
  #         Value: 'sodbaveka-private-a'
  #     VpcId: !Ref SodbavekaVPC  
  # PrivateSubnetB:
  #   Type: AWS::EC2::Subnet
  #   Properties:
  #     AvailabilityZone: eu-west-3b
  #     CidrBlock: 10.0.20.0/24
  #     Tags:
  #       - Key: Name
  #         Value: 'sodbaveka-private-b'
  #     VpcId: !Ref SodbavekaVPC 
  # PrivateSubnetC:
  #   Type: AWS::EC2::Subnet
  #   Properties:
  #     AvailabilityZone: eu-west-3c
  #     CidrBlock: 10.0.30.0/24
  #     Tags:
  #       - Key: Name
  #         Value: 'sodbaveka-private-c'
  #     VpcId: !Ref SodbavekaVPC 
  ### Next step : Create public subnets in new VPC
  PublicSubnetA:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: eu-west-3a
      CidrBlock: 10.0.1.0/24
      Tags:
        - Key: Name
          Value: 'sodbaveka-public-a'
      VpcId: !Ref SodbavekaVPC  
  PublicSubnetB:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: eu-west-3b
      CidrBlock: 10.0.2.0/24
      Tags:
        - Key: Name
          Value: 'sodbaveka-public-b'
      VpcId: !Ref SodbavekaVPC 
  PublicSubnetC:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: eu-west-3c
      CidrBlock: 10.0.3.0/24
      Tags:
        - Key: Name
          Value: 'sodbaveka-public-c'
      VpcId: !Ref SodbavekaVPC
  ### Next step : Create internet gateway
  InternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties: 
      Tags:
        - Key: Name
          Value: 'sodbaveka-internet-gateway'
  ### Next step : Attach internet gateway to VPC
  AttachInternetGateway:
    Type: 'AWS::EC2::VPCGatewayAttachment'
    Properties:
      VpcId: !Ref SodbavekaVPC
      InternetGatewayId: !Ref InternetGateway
  # ### Next step : Create elastic IPs for NAT gateways
  # NatEipA:
  #   Type: AWS::EC2::EIP
  #   Properties:
  #     Domain: vpc
  #     Tags:
  #       - Key: Name
  #         Value: 'sodbaveka-elastic-ip-a'
  # NatEipB:
  #   Type: AWS::EC2::EIP
  #   Properties:
  #     Domain: vpc
  #     Tags:
  #       - Key: Name
  #         Value: 'sodbaveka-elastic-ip-b'
  # NatEipC:
  #   Type: AWS::EC2::EIP
  #   Properties:
  #     Domain: vpc
  #     Tags:
  #       - Key: Name
  #         Value: 'sodbaveka-elastic-ip-c'
  ### Next step : Create NAT gateways
  # NatGatewayA:
  #   DependsOn: AttachInternetGateway
  #   Type: AWS::EC2::NatGateway
  #   Properties:
  #     AllocationId: !GetAtt NatEipA.AllocationId
  #     SubnetId: !Ref PublicSubnetA
  #     Tags:
  #       - Key: Name
  #         Value: 'sodbaveka-nat-a'
  # NatGatewayB:
  #   DependsOn: AttachInternetGateway
  #   Type: AWS::EC2::NatGateway
  #   Properties:
  #     AllocationId: !GetAtt NatEipB.AllocationId
  #     SubnetId: !Ref PublicSubnetB
  #     Tags:
  #       - Key: Name
  #         Value: 'sodbaveka-nat-b'
  # NatGatewayC:
  #   DependsOn: AttachInternetGateway
  #   Type: AWS::EC2::NatGateway
  #   Properties:
  #     AllocationId: !GetAtt NatEipC.AllocationId
  #     SubnetId: !Ref PublicSubnetC
  #     Tags:
  #       - Key: Name
  #         Value: 'sodbaveka-nat-c'
  ### Next step : Create route tables
  PublicRouteTableA:
    Type: AWS::EC2::RouteTable
    Properties: 
      VpcId: !Ref SodbavekaVPC
      Tags:
        - Key: Name
          Value: 'sodbaveka-route-public-a'
  PublicRouteTableB:
    Type: AWS::EC2::RouteTable
    Properties: 
      VpcId: !Ref SodbavekaVPC
      Tags:
        - Key: Name
          Value: 'sodbaveka-route-public-b'
  # PublicRouteTableC:
  #   Type: AWS::EC2::RouteTable
  #   Properties: 
  #     VpcId: !Ref SodbavekaVPC
  #     Tags:
  #       - Key: Name
  #         Value: 'sodbaveka-route-public-c'
  # PrivateRouteTableA:
  #   Type: AWS::EC2::RouteTable
  #   Properties: 
  #     VpcId: !Ref SodbavekaVPC
  #     Tags:
  #       - Key: Name
  #         Value: 'sodbaveka-route-private-a'
  # PrivateRouteTableB:
  #   Type: AWS::EC2::RouteTable
  #   Properties: 
  #     VpcId: !Ref SodbavekaVPC
  #     Tags:
  #       - Key: Name
  #         Value: 'sodbaveka-route-private-b'
  # PrivateRouteTableC:
  #   Type: AWS::EC2::RouteTable
  #   Properties: 
  #     VpcId: !Ref SodbavekaVPC
  #     Tags:
  #       - Key: Name
  #         Value: 'sodbaveka-route-private-c'
  ### Next step : Create route tables associations
  AttachPublicRouteTableA:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PublicRouteTableA
      SubnetId: !Ref PublicSubnetA
  AttachPublicRouteTableB:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PublicRouteTableB
      SubnetId: !Ref PublicSubnetB
  # AttachPublicRouteTableC:
  #   Type: AWS::EC2::SubnetRouteTableAssociation
  #   Properties:
  #     RouteTableId: !Ref PublicRouteTableC
  #     SubnetId: !Ref PublicSubnetC
  # AttachPrivateRouteTableA:
  #   Type: AWS::EC2::SubnetRouteTableAssociation
  #   Properties:
  #     RouteTableId: !Ref PrivateRouteTableA
  #     SubnetId: !Ref PrivateSubnetA
  # AttachPrivateRouteTableB:
  #   Type: AWS::EC2::SubnetRouteTableAssociation
  #   Properties:
  #     RouteTableId: !Ref PrivateRouteTableB
  #     SubnetId: !Ref PrivateSubnetB
  # AttachPrivateRouteTableC:
  #   Type: AWS::EC2::SubnetRouteTableAssociation
  #   Properties:
  #     RouteTableId: !Ref PrivateRouteTableC
  #     SubnetId: !Ref PrivateSubnetC
  ### Next step : Create routes for the public subnet of Availability Zone A
  PublicRouteA:
    Type: AWS::EC2::Route
    Properties: 
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway
      RouteTableId: !Ref PublicRouteTableA
  ### Next step : Create routes for the public subnet of Availability Zone B
  PublicRouteB:
    Type: AWS::EC2::Route
    Properties: 
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway
      RouteTableId: !Ref PublicRouteTableB
  # ### Next step : Create routes for the public subnet of Availability Zone C
  # PublicRouteC:
  #   Type: AWS::EC2::Route
  #   Properties: 
  #     DestinationCidrBlock: 0.0.0.0/0
  #     GatewayId: !Ref InternetGateway
  #     RouteTableId: !Ref PublicRouteTableC
  # ### Next step : Create routes for the private subnet of Availability Zone A
  # PrivateRouteA:
  #   Type: AWS::EC2::Route
  #   Properties: 
  #     DestinationCidrBlock: 0.0.0.0/0
  #     NatGatewayId: !Ref NatGatewayA
  #     RouteTableId: !Ref PrivateRouteTableA
  # ### Next step : Create routes for the private subnet of Availability Zone B
  # PrivateRouteB:
  #   Type: AWS::EC2::Route
  #   Properties: 
  #     DestinationCidrBlock: 0.0.0.0/0
  #     NatGatewayId: !Ref NatGatewayB
  #     RouteTableId: !Ref PrivateRouteTableB
  # ### Next step : Create routes for the private subnet of Availability Zone C
  # PrivateRouteC:
  #   Type: AWS::EC2::Route
  #   Properties: 
  #     DestinationCidrBlock: 0.0.0.0/0
  #     NatGatewayId: !Ref NatGatewayC
  #     RouteTableId: !Ref PrivateRouteTableC
  #
  #
  # ##################
  # # Infrastructure #
  # ##################
  #
  #
  ### First step : Create RDS Security Group
  InfraRDSSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Infra RDS security group
      SecurityGroupEgress:
        - IpProtocol: -1
          CidrIp: 0.0.0.0/0
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 3306
          ToPort: 3306
          # A MODIFIER
          CidrIp: 0.0.0.0/0
          # A SUPPRIMER
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: 0.0.0.0/0
      VpcId: !Ref SodbavekaVPC
      Tags:
        - Key: Name
          Value: 'sodbaveka-rds-securityG'
        - Key: Project
          Value: 'P10_OCR'
  #
  #
  ### Next step : Create DB subnet group
  DBSubnetGroup001:
    Type: AWS::RDS::DBSubnetGroup
    Properties: 
      DBSubnetGroupDescription: DB subnet group
      DBSubnetGroupName: sodbaveka-rds-DBSubnetGroup
      SubnetIds: 
        - !Ref PublicSubnetA
        - !Ref PublicSubnetB
      Tags: 
        - Key: Name
          Value: 'sodbaveka-rds-DBSubnetGroup'
        - Key: Project
          Value: 'P10_OCR'
  #
  #
  ### Next step : Create RDS instance
  DBserver001:
    Type: AWS::RDS::DBInstance
    Properties:
      DBSubnetGroupName: !Ref DBSubnetGroup001
      Engine: MySQL
      MasterUsername: theseus
      MasterUserPassword: theseus1
      DBName: WordPress
      DBInstanceClass: db.t2.micro
      AllocatedStorage: '20'
      MultiAZ: true
      # Not allowed with MultiAZ
      #AvailabilityZone: eu-west-3a
      VPCSecurityGroups: 
        - !Ref InfraRDSSecurityGroup
      Tags:
        - Key: Name
          Value: 'sodbaveka-rds-wordpress'
        - Key: Project
          Value: 'P10_OCR'
  #
  #
  ### Next step : Create EFS Security Group
  InfraEFSSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Infra EFS security group
      SecurityGroupEgress:
        - IpProtocol: -1
          CidrIp: 0.0.0.0/0
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 2049
          ToPort: 2049
          SourceSecurityGroupId: !Ref InfraEC2SecurityGroup
      VpcId: !Ref SodbavekaVPC
      Tags:
        - Key: Name
          Value: 'sodbaveka-efs-securityG'
        - Key: Project
          Value: 'P10_OCR'
  #
  #
  ### Next step : Create EFS file system
  EFSFileSystem:
    Type: AWS::EFS::FileSystem
    Properties:
      BackupPolicy:
        Status: ENABLED
      Encrypted: true
      LifecyclePolicies:
        - TransitionToIA: AFTER_60_DAYS
      PerformanceMode: generalPurpose
      Encrypted: true
      ThroughputMode: bursting
      FileSystemTags: 
        - Key: Name
          Value: 'sodbaveka-efs-file-system'
        - Key: Project
          Value: 'P10_OCR'
  MountTarget1:
    Type: AWS::EFS::MountTarget
    Properties: 
      FileSystemId: !Ref EFSFileSystem
      IpAddress: 10.0.1.30
      SecurityGroups: 
        - !Ref InfraEFSSecurityGroup
      SubnetId: !Ref PublicSubnetA
  MountTarget2:
    Type: AWS::EFS::MountTarget
    Properties: 
      FileSystemId: !Ref EFSFileSystem
      IpAddress: 10.0.2.30
      SecurityGroups: 
        - !Ref InfraEFSSecurityGroup
      SubnetId: !Ref PublicSubnetB
  #
  #
  ### Next step : Create EC2 Security Group
  InfraEC2SecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Infra EC2 security group
      SecurityGroupEgress:
        - IpProtocol: -1
          CidrIp: 0.0.0.0/0
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: 0.0.0.0/0
      VpcId: !Ref SodbavekaVPC
      Tags:
        - Key: Name
          Value: 'sodbaveka-ec2-securityG'
        - Key: Project
          Value: 'P10_OCR'
  #
  #
  ### Next step : Create EC2 instance
  # InstAppli001:
  #   DependsOn: 
  #     - EFSFileSystem
  #     - DBserver001
  #   Type : AWS::EC2::Instance
  #   Properties:
  #     InstanceType: t2.micro
  #     ImageId: ami-00c08ad1a6ca8ca7c
  #     KeyName: P10-aws
  #     NetworkInterfaces:
  #       - AssociatePublicIpAddress: true
  #         DeviceIndex: "0"
  #         GroupSet: 
  #           - !Ref InfraEC2SecurityGroup
  #         SubnetId: !Ref PublicSubnetA
  #     #SubnetId: !Ref PublicSubnetA
  #     Tags:
  #       - Key: Name
  #         Value: 'sodbaveka-ec2-firstInstance'
  #       - Key: Project
  #         Value: 'P10_OCR'
  #     # SecurityGroups: 
  #     #   - !Ref InfraEC2SecurityGroup
  #     UserData: 
  #       'Fn::Base64': !Sub |
  #         #!/bin/bash
  #         export STACK_NAME=${AWS::StackName}
  #         echo "Stack name : "$STACK_NAME > /home/ec2-user/TEMOIN-001
  #
  #
  ### Next step : Create Launch Configuration
  WebsiteLaunchConfig:
    DependsOn: 
      - EFSFileSystem
      - DBserver001
    Type: AWS::AutoScaling::LaunchConfiguration
    Properties: 
      AssociatePublicIpAddress: true
      ImageId: ami-00c08ad1a6ca8ca7c
      InstanceType: t2.micro
      KeyName: P10-aws
      LaunchConfigurationName: "sodbaveka-launchConfiguration"
      SecurityGroups:
        - !Ref InfraEC2SecurityGroup
      UserData: 
        'Fn::Base64': !Sub |
          #!/bin/bash
          export DB_HOST=${DBserver001.Endpoint.Address}
          export STACK_NAME=${AWS::StackName}
          export EFS_IP=${MountTarget1.IpAddress}
          export EFS_ID=${EFSFileSystem.FileSystemId}
          export LB_DNS=${WebsiteLoadBalancer.DNSName}
          echo "Stack name : "$STACK_NAME > /home/ec2-user/TEMOIN-001
          echo "EFS ip : "$EFS_IP >> /home/ec2-user/TEMOIN-001
          echo "EFS id : "$EFS_ID >> /home/ec2-user/TEMOIN-001
          echo "Database host : "$DB_HOST >> /home/ec2-user/TEMOIN-001
          echo "Load Balancer DNS : "$LB_DNS >> /home/ec2-user/TEMOIN-001
          
          echo "OS update : In progress..." >> /var/log/userdata.txt
          yum update -y && echo "OS update : Completed." >> /var/log/userdata.txt

          echo "Docker installation : In progress..." >> /var/log/userdata.txt
          amazon-linux-extras install docker
          yum install -y docker
          service docker start && echo "Docker installation : Completed." >> /var/log/userdata.txt
          usermod -a -G docker ec2-user

          echo "Mysql-client installation : In progress..." >> /var/log/userdata.txt
          yum install -y mysql && echo "Mysql-client installation : Completed." >> /var/log/userdata.txt

          echo "stress package installation : In progress..." >> /var/log/userdata.txt
          amazon-linux-extras install epel -y
          yum install -y stress && echo "stress package installation : Completed." >> /var/log/userdata.txt

          echo "Mounting aws efs : In progress..." >> /var/log/userdata.txt
          mkdir /home/ec2-user/efs-mount-point
          mount -t nfs -o nfsvers=4.1,rsize=1048576,wsize=1048576,hard,timeo=600,retrans=2,noresvport $EFS_ID.efs.eu-west-3.amzonaws.com:/ /home/ec2-user/efs-mount-point
          chmod -R 777 /home/ec2-user/efs-mount-point
          cd /home/ec2-user/efs-mount-point
          echo "test - `date`" > mount_log.txt && echo "Mounting aws efs : Completed." >> /var/log/userdata.txt

          echo "Writing in fstab : In progress..." >> /var/log/userdata.txt
          export EXIST_MOUNT=`grep -i "$EFS_ID" /etc/fstab`
          if [[ -z "$EXIST_MOUNT" ]] ; then
            echo "$EFS_ID.efs.eu-west-3.amzonaws.com:/ /home/ec2-user/efs-mount-point nfs defaults,_netdev 0 0" >> /etc/fstab  
          fi
          echo "Writing in fstab : Completed." >> /var/log/userdata.txt

          echo "Running wordpress docker : In progress..." >> /var/log/userdata.txt
          docker run -d -p 80:80 --name=myWordpress -e WORDPRESS_DB_HOST=$DB_HOST:3306 -e WORDPRESS_DB_USER=theseus -e WORDPRESS_DB_PASSWORD=theseus1 -e WORDPRESS_DB_NAME=WordPress -v /home/ec2-user/efs-mount-point/:/var/www/html/ wordpress:latest
          
          echo "wp-cli, website and S3 plugin installation in docker container : In progress..." >> /var/log/userdata.txt
          docker exec -ti --tty=false myWordpress bash <<-EOF 
          echo "wp-cli installation : In progress..." >> /var/log/wordpressDocker.txt
          curl -O https://raw.githubusercontent.com/wp-cli/builds/gh-pages/phar/wp-cli.phar
          php wp-cli.phar --info
          chmod +x wp-cli.phar
          mv wp-cli.phar /usr/local/bin/wp && echo "wp-cli installation : Completed." >> /var/log/wordpressDocker.txt
          if [ -e /var/www/html/installOk.txt ]
          then
              echo "Wordpress already installed" >> /var/log/wordpressDocker.txt
          else
              echo "Wordpress installation : In progress..." >> /var/log/wordpressDocker.txt
              wp core install --url="$LB_DNS" --title="SodbavekaWebsite" --admin_user=theseus --admin_password=theseus --admin_email=sodbaveka@gmail.com --allow-root
              wp plugin install amazon-s3-and-cloudfront --allow-root && wp plugin activate amazon-s3-and-cloudfront --allow-root
              cd /var/www/html
              sed -i "127idefine( 'AS3CF_SETTINGS', serialize( array('provider' => 'aws','access-key-id' => '***','secret-access-key' => '***',) ) );" wp-config.php
              chmod -R 777 /var/www/html/
              touch /var/www/html/installOk.txt && echo "Wordpress installation : Completed." >> /var/log/wordpressDocker.txt
          fi
          EOF
          echo "wp-cli, website and S3 plugin installation in docker container : Completed." >> /var/log/userdata.txt
  #
  #        
  ### Next step : Create Auto Scaling Group
  WebsiteScalingGroup:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      AutoScalingGroupName: "sodbaveka-autoScalingGroup"
      LaunchConfigurationName: !Ref WebsiteLaunchConfig
      AvailabilityZones:
        - Fn::Select:
          - 0
          - Fn::GetAZs: !Ref AWS::Region
        - Fn::Select:
          - 1
          - Fn::GetAZs: !Ref AWS::Region
      VPCZoneIdentifier: 
        - !Ref PublicSubnetA
        - !Ref PublicSubnetB
      MetricsCollection:
        - Granularity: 1Minute
      DesiredCapacity: 2
      MaxSize: 4
      MinSize: 1
      TargetGroupARNs: 
        - !Ref WebsiteTargetGroup
  #
  #
  ### Next step : Create Target Group
  WebsiteTargetGroup: 
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties: 
      Port: 80
      Protocol: HTTP
      TargetGroupAttributes:
        - Key: "stickiness.enabled"
          Value: true
        - Key: "stickiness.type"
          Value: "lb_cookie"
      VpcId: !Ref SodbavekaVPC
  #
  #
  ### Next step : Create Load Balancer
  WebsiteLoadBalancer: 
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Type: application
      Scheme: internet-facing
      SecurityGroups:
        - !Ref WebsiteLoadBalancerSecurityGroup
      Subnets:  
        - !Ref PublicSubnetA
        - !Ref PublicSubnetB
  WebsiteLoadBalancerSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Website EC2 security group 
      SecurityGroupEgress:
        - IpProtocol: -1
          CidrIp: 0.0.0.0/0
      SecurityGroupIngress: 
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
      VpcId: !Ref SodbavekaVPC
      Tags:
        - Key: Name
          Value: 'sodbaveka-loadB-securityG'
        - Key: Project
          Value: 'P10_OCR'
  WebsiteLoadBlancerListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties: 
      LoadBalancerArn: !Ref WebsiteLoadBalancer
      Port: 80
      Protocol: HTTP
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref WebsiteTargetGroup
  #
  #
  ### Next step : Create CloudWatch Alarm to check CPU usage
  CPUAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmName: sodbaveka-cloudwatch-alarm
      AlarmDescription: Scale-up if CPU is greater than 80%
      AlarmActions:
        - !Ref WebServerScaleUpPolicy
        - !Ref SNSTopicEmail        
      MetricName: CPUUtilization
      Namespace: AWS/EC2
      Statistic: Average
      Period: 300
      EvaluationPeriods: 1
      Threshold: 80
      ComparisonOperator: GreaterThanOrEqualToThreshold
      DatapointsToAlarm: 1
      TreatMissingData: missing
      Dimensions:
        - Name: AutoScalingGroupName
          Value: !Ref WebsiteScalingGroup
  #
  #
  ### Next step : Create Scale Up Policy
  WebServerScaleUpPolicy:
    Type: AWS::AutoScaling::ScalingPolicy
    Properties:
      AdjustmentType: ChangeInCapacity
      AutoScalingGroupName: !Ref WebsiteScalingGroup
      PolicyType: SimpleScaling
      ScalingAdjustment: 1
  #
  #
  ### Next step : Create topic to send notification by mail
  SNSTopicEmail:
    Type: AWS::SNS::Topic
    Properties:
      TopicName: AlarmTopic
      Subscription:
        - Endpoint: "sodbaveka@gmail.com"
          Protocol: "email"
  #
  #
          