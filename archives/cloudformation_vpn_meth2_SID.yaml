
### Generalities
AWSTemplateFormatVersion: 2010-09-09
Description: >-
  AWS CloudFormation VPC Template
### Create ressources
Resources:
  ###########
  # Network #
  ###########
  #
  #
  ### First step : Create VPC
  SodbavekaVPC:
    Type: 'AWS::EC2::VPC'
    Properties:
      CidrBlock: 10.0.0.0/16
      Tags:
        - Key: Name
          Value: 'sodbaveka-main-VPC'
        - Key: Project
          Value: 'P10_OCR'
  PrivateSubnetC:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: eu-west-3c
      CidrBlock: 10.0.30.0/24
      Tags:
        - Key: Name
          Value: 'sodbaveka-private-c'
      VpcId: !Ref SodbavekaVPC 
  PublicSubnetC:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: eu-west-3c
      CidrBlock: 10.0.3.0/24
      Tags:
        - Key: Name
          Value: 'sodbaveka-public-c'
      VpcId: !Ref SodbavekaVPC
  ### Next step : Create internet gateway
  InternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties: 
      Tags:
        - Key: Name
          Value: 'sodbaveka-internet-gateway'
  ### Next step : Attach internet gateway to VPC
  AttachInternetGateway:
    Type: 'AWS::EC2::VPCGatewayAttachment'
    Properties:
      VpcId: !Ref SodbavekaVPC
      InternetGatewayId: !Ref InternetGateway
  ### Next step : Create elastic IPs for NAT gateways
  NatEipC:
    Type: AWS::EC2::EIP
    Properties:
      Domain: vpc
      Tags:
        - Key: Name
          Value: 'sodbaveka-elastic-ip-c'
  ### Next step : Create NAT gateways
  NatGatewayC:
    DependsOn: AttachInternetGateway
    Type: AWS::EC2::NatGateway
    Properties:
      AllocationId: !GetAtt NatEipC.AllocationId
      SubnetId: !Ref PublicSubnetC
      Tags:
        - Key: Name
          Value: 'sodbaveka-nat-c'
  ### Next step : Create route tables
  PublicRouteTableC:
    Type: AWS::EC2::RouteTable
    Properties: 
      VpcId: !Ref SodbavekaVPC
      Tags:
        - Key: Name
          Value: 'sodbaveka-route-public-c'
  PrivateRouteTableC:
    Type: AWS::EC2::RouteTable
    Properties: 
      VpcId: !Ref SodbavekaVPC
      Tags:
        - Key: Name
          Value: 'sodbaveka-route-private-c'
  ### Next step : Create route tables associations
  AttachPublicRouteTableC:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PublicRouteTableC
      SubnetId: !Ref PublicSubnetC
  AttachPrivateRouteTableC:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PrivateRouteTableC
      SubnetId: !Ref PrivateSubnetC
  ### Next step : Create routes for the public subnet of Availability Zone C
  PublicRouteC:
    Type: AWS::EC2::Route
    Properties: 
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway
      RouteTableId: !Ref PublicRouteTableC
  ### Next step : Create routes for the private subnet of Availability Zone C
  PrivateRouteC:
    Type: AWS::EC2::Route
    Properties: 
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref NatGatewayC
      #InstanceId: !Ref AwsVpnEc2
      RouteTableId: !Ref PrivateRouteTableC
  PrivateRouteC2:
    Type: AWS::EC2::Route
    Properties: 
      DestinationCidrBlock: 192.168.100.0/24
      #NatGatewayId: !Ref NatGatewayA
      InstanceId: !Ref AwsVpnEc2
      RouteTableId: !Ref PrivateRouteTableC
  #
  #
  # ##################
  # # Infrastructure #
  # ##################
  #
  #
  ### Next step : Create VPN Security Group
  VPNSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: VPN security group
      SecurityGroupEgress:
          # - IpProtocol: -1
          #   CidrIp: 0.0.0.0/0
        - IpProtocol: icmp
          FromPort: -1
          ToPort: -1
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 8080
          ToPort: 8080
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 2222
          ToPort: 2222
          CidrIp: 0.0.0.0/0
        - IpProtocol: udp
          FromPort: 500
          ToPort: 500
          CidrIp: 0.0.0.0/0
        - IpProtocol: udp
          FromPort: 4500
          ToPort: 4500
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 445
          ToPort: 445
          CidrIp: 0.0.0.0/0
      SecurityGroupIngress:
          # - IpProtocol: -1
          #   CidrIp: 0.0.0.0/0
        - IpProtocol: icmp
          FromPort: -1
          ToPort: -1
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 8080
          ToPort: 8080
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 2222
          ToPort: 2222
          CidrIp: 0.0.0.0/0
        - IpProtocol: udp
          FromPort: 500
          ToPort: 500
          CidrIp: 0.0.0.0/0
        - IpProtocol: udp
          FromPort: 4500
          ToPort: 4500
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 445
          ToPort: 445
          CidrIp: 0.0.0.0/0
      VpcId: !Ref SodbavekaVPC
      Tags:
        - Key: Name
          Value: 'sodbaveka-vpn-securityG'
        - Key: Project
          Value: 'P10_OCR'
  #
  #
  ### Next step : Create VPN EC2 instance 
  AwsVpnEc2:
    Type : AWS::EC2::Instance
    Properties:
      InstanceType: t2.micro
      ImageId: ami-00c08ad1a6ca8ca7c
      KeyName: P10-aws
      NetworkInterfaces:
        # - AssociatePublicIpAddress: true
        - DeviceIndex: "0"
          GroupSet: 
            - !Ref VPNSecurityGroup
          SubnetId: !Ref PrivateSubnetC
      # SubnetId: !Ref PublicSubnetA
      SourceDestCheck: false
      Tags:
        - Key: Name
          Value: 'sodbaveka-ec2-VPN'
        - Key: Project
          Value: 'P10_OCR'
      # SecurityGroups: 
      #   - !Ref InfraEC2SecurityGroup
      UserData: 
        'Fn::Base64': !Sub |
          #!/bin/bash
          export STACK_NAME=${AWS::StackName}
          export PUB_IP=`curl ifconfig.me`
          export PUB_IP2=`dig @resolver1.opendns.com -t A -4 myip.opendns.com +short`
          echo "Stack name : "$STACK_NAME > /home/ec2-user/TEMOIN-001
          echo "VPN Public IP : "$PUB_IP >> /home/ec2-user/TEMOIN-001
          echo "Who am i ? AwsVpnEc2" >> /home/ec2-user/TEMOIN-001

          echo "OS update : In progress..." >> /var/log/userdata.txt
          yum update -y && echo "OS update : Completed." >> /var/log/userdata.txt

          cat >> /etc/sysctl.conf << EOF
          net.ipv4.ip_forward = 1
          net.ipv4.conf.all.accept_redirects = 0
          net.ipv4.conf.all.send_redirects = 0
          net.ipv6.conf.all.forwarding = 1 
          EOF
          sysctl -p /etc/sysctl.conf && echo "Activate forwarding : Completed." >> /var/log/userdata.txt

          echo "NAT and DNAT rules : In progress..." >> /var/log/userdata.txt
          yum install -y iptables iptables-services
          systemctl start iptables
          systemctl enable iptables
          iptables --flush -t filter
          iptables --flush -t nat
          iptables -t nat -A POSTROUTING -o eth0 ! -d 192.168.100.0/24 -j MASQUERADE
          iptables -t nat -A PREROUTING -i eth0 -p tcp --dport 8080 -j DNAT --to 10.0.30.30:8080
          iptables -t nat -A PREROUTING -i eth0 -p tcp --dport 2222 -j DNAT --to 10.0.30.30:22
          service iptables save

          amazon-linux-extras install epel -y
          yum install samba-client -y
          yum install nmap -y
          yum install strongswan -y
          systemctl start strongswan
          systemctl enable strongswan

          cat > /etc/strongswan/ipsec.conf << EOF
          config setup
              charondebug="all"
              uniqueids=yes
              strictcrlpolicy=no
          conn aws-to-local
              type=tunnel
              auto=start
              keyexchange=ikev2
              authby=secret
              lest=%defaultroute
              leftid=$PUB_IP
              leftsubnet=10.0.30.0/24
              right=109.22.80.19
              rightsubnet=192.168.100.0/24
              ike=aes256-sha1-modp1024!
              esp=aes256-sha1!
              aggressive=no
              keyingtries=%forever
              ikelifetime=28800s
              lifetime=3600s
              dpddelay=30s
              dpdtimeout=120s
              dpdaction=restart
          EOF

          cat >> /etc/strongswan/ipsec.secrets << EOF 
          $PUB_IP 109.22.80.19 : PSK "W+XhKhK89tHgLfuoa7L+gDyXA/2jDHW2"
          EOF

          systemctl stop strongswan
          systemctl restart NetworkManager && sleep 10 
          systemctl start strongswan
  #
  #
  ### Next step : Create EC2 Security Group
  InfraEC2SecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Infra EC2 security group
      SecurityGroupEgress:
        - IpProtocol: -1
          CidrIp: 0.0.0.0/0
      SecurityGroupIngress:
        # - IpProtocol: -1
        #   CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 8080
          ToPort: 8080
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: 0.0.0.0/0
        - IpProtocol: icmp
          FromPort: -1
          ToPort: -1
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 445
          ToPort: 445
          CidrIp: 0.0.0.0/0
      VpcId: !Ref SodbavekaVPC
      Tags:
        - Key: Name
          Value: 'sodbaveka-ec2-securityG'
        - Key: Project
          Value: 'P10_OCR'
  #
  #
  ### Next step : Create Intranet EC2 instance 
  AwsIntraEc2:
    DependsOn: 
      - AwsVpnEc2
    Type : AWS::EC2::Instance
    Properties:
      InstanceType: t2.micro
      ImageId: ami-00c08ad1a6ca8ca7c
      KeyName: P10-aws
      NetworkInterfaces:
      #   - AssociatePublicIpAddress: true
          - DeviceIndex: "0"
            PrivateIpAddress: 10.0.30.30
            GroupSet: 
              - !Ref InfraEC2SecurityGroup
            SubnetId: !Ref PrivateSubnetC
      # SubnetId: !Ref PrivateSubnetC
      Tags:
        - Key: Name
          Value: 'sodbaveka-ec2-Intranet'
        - Key: Project
          Value: 'P10_OCR'
      # SecurityGroups: 
      #    - !Ref InfraEC2SecurityGroup
      UserData: 
        'Fn::Base64': !Sub |
          #!/bin/bash
          export STACK_NAME=${AWS::StackName}
          echo "Stack name : "$STACK_NAME > /home/ec2-user/TEMOIN-001
          echo "Who am i ? AwsIntraEc2" >> /home/ec2-user/TEMOIN-001

          amazon-linux-extras install epel -y
          yum install samba-client -y

          echo "OS update : In progress..." >> /var/log/userdata.txt
          yum update -y && echo "OS update : Completed." >> /var/log/userdata.txt

          echo "Docker installation : In progress..." >> /var/log/userdata.txt
          amazon-linux-extras install docker
          yum install -y docker           
          service docker start && echo "Docker installation : Completed." >> /var/log/userdata.txt
          usermod -a -G docker ec2-user

          docker run -p 8080:8080 bitnami/apache:latest && echo "Running apache docker : In progress..." >> /var/log/userdata.txt
  #
  #
  ### Next step : Create bastion EC2 instance 
  AwsBastionEc2:
    Type : AWS::EC2::Instance
    Properties:
      InstanceType: t2.micro
      ImageId: ami-00c08ad1a6ca8ca7c
      KeyName: P10-aws
      NetworkInterfaces:
        - AssociatePublicIpAddress: true
          DeviceIndex: "0"
          GroupSet: 
            - !Ref InfraEC2SecurityGroup
          SubnetId: !Ref PublicSubnetC
      Tags:
        - Key: Name
          Value: 'sodbaveka-ec2-bastion'
        - Key: Project
          Value: 'P10_OCR'
      UserData: 
        'Fn::Base64': !Sub |
          #!/bin/bash
          export STACK_NAME=${AWS::StackName}
          echo "Stack name : "$STACK_NAME > /home/ec2-user/TEMOIN-001
          echo "Who am i ? AwsBastionEc2" >> /home/ec2-user/TEMOIN-001

          amazon-linux-extras install epel -y
          yum install samba-client -y

          echo "OS update : In progress..." >> /var/log/userdata.txt
          yum update -y && echo "OS update : Completed." >> /var/log/userdata.txt