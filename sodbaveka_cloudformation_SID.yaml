### Generalities
AWSTemplateFormatVersion: 2010-09-09
Description: >-
  AWS CloudFormation VPC Template
### Create ressources
Resources:
  # ##################
  # # Infrastructure #
  # ##################
  #
  #
  ### First step : Create EC2 Security Group
  InfraEC2SecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Infra EC2 security group
      SecurityGroupEgress:
        - IpProtocol: -1
          CidrIp: 0.0.0.0/0
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 8080
          ToPort: 8080
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: 0.0.0.0/0
      VpcId: vpc-8ce01ae4
      Tags:
        - Key: Name
          Value: 'sodbaveka-ec2-securityG'
        - Key: Project
          Value: 'P10_OCR'
  #
  #
  ### Next step : Create EC2 instance
  InstAppli001:
    Type : AWS::EC2::Instance
    Properties:
      InstanceType: t2.micro
      ImageId: ami-00c08ad1a6ca8ca7c
      KeyName: P10-aws
      InstanceInitiatedShutdownBehavior: terminate
      NetworkInterfaces:
        - AssociatePublicIpAddress: true
          DeviceIndex: "0"
          GroupSet: 
            - !Ref InfraEC2SecurityGroup
      Tags:
        - Key: Name
          Value: 'sodbaveka-ec2-firstInstance'
        - Key: Project
          Value: 'P10_OCR'
      UserData: 
        'Fn::Base64': !Sub |
          #!/bin/bash
          
          export STACK_NAME=${AWS::StackName}
          echo "Stack name : "$STACK_NAME > /home/ec2-user/TEMOIN-001

          touch /home/ec2-user/test_instance_userdata.txt          
          
          echo "OS update : In progress..." >> /var/log/userdata.txt
          yum update -y && echo "OS update : Completed." >> /var/log/userdata.txt

          echo "Docker installation : In progress..." >> /var/log/userdata.txt
          amazon-linux-extras install docker
          yum install -y docker
          service docker start && echo "Docker installation : Completed." >> /var/log/userdata.txt
          usermod -a -G docker ec2-user

          echo "Mysql-client installation : In progress..." >> /var/log/userdata.txt
          yum install -y mysql && echo "Mysql-client installation : Completed." >> /var/log/userdata.txt

          docker run -p 8080:8080 -p 8443:8443 bitnami/apache:latest
  #
  #
  ### Next step : Create Launch Configuration
  WebsiteLaunchConfig:
    DependsOn: 
      - InstAppli001
    Type: AWS::AutoScaling::LaunchConfiguration
    Properties: 
      AssociatePublicIpAddress: true
      InstanceId: !Ref InstAppli001
      # InstanceType: t2.micro
      KeyName: P10-aws
      LaunchConfigurationName: "sodbaveka-launchConfiguration"
      SecurityGroups:
        - !Ref InfraEC2SecurityGroup
      UserData: 
        'Fn::Base64': !Sub |
          #!/bin/bash
          
          export STACK_NAME=${AWS::StackName}
          echo "Stack name : "$STACK_NAME > /home/ec2-user/TEMOIN-001

          touch /home/ec2-user/test_launchConfig_userdata.txt   

          echo "OS update : In progress..." >> /var/log/userdata.txt
          yum update -y && echo "OS update : Completed." >> /var/log/userdata.txt

          echo "Docker installation : In progress..." >> /var/log/userdata.txt
          amazon-linux-extras install docker
          yum install -y docker
          service docker start && echo "Docker installation : Completed." >> /var/log/userdata.txt
          usermod -a -G docker ec2-user

          echo "Mysql-client installation : In progress..." >> /var/log/userdata.txt
          yum install -y mysql && echo "Mysql-client installation : Completed." >> /var/log/userdata.txt

          docker run -p 8080:8080 -p 8443:8443 bitnami/apache:latest
  ### Next step : Create Scaling Group
  WebsiteScalingGroup:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      AutoScalingGroupName: "sodbaveka-autoScalingGroup"
      LaunchConfigurationName: !Ref WebsiteLaunchConfig
      AvailabilityZones:
        - Fn::Select:
          - 0
          - Fn::GetAZs: !Ref AWS::Region
        - Fn::Select:
          - 1
          - Fn::GetAZs: !Ref AWS::Region
      VPCZoneIdentifier: 
        - subnet-130eef7b
        - subnet-bcb78fc7
      DesiredCapacity: 2
      MaxSize: 2
      MinSize: 1
      TargetGroupARNs: 
        - !Ref WebsiteTargetGroup
  ### Next step : Create Target Group
  WebsiteTargetGroup: 
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties: 
      Port: 8080
      Protocol: HTTP
      VpcId: vpc-8ce01ae4
  ### Next step : Create Load Balancer
  WebsiteLoadBalancer: 
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Type: application
      Scheme: internet-facing
      SecurityGroups:
        - !Ref WebsiteLoadBalancerSecurityGroup
      Subnets:  
        - subnet-130eef7b
        - subnet-bcb78fc7
  WebsiteLoadBalancerSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Website EC2 security group 
      SecurityGroupEgress:
        - IpProtocol: -1
          CidrIp: 0.0.0.0/0
      SecurityGroupIngress: 
        - IpProtocol: tcp
          FromPort: 8080
          ToPort: 8080
          CidrIp: 0.0.0.0/0
      VpcId: vpc-8ce01ae4
  WebsiteLoadBlancerListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties: 
      LoadBalancerArn: !Ref WebsiteLoadBalancer
      Port: 8080
      Protocol: HTTP
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref WebsiteTargetGroup